1.新增用户信息
<!--添加用户对话框-->
    <el-dialog
      title="提示"
      :visible.sync="dialogVisible"
      width="30%"
      :before-close="handleClose">
      <span>这是一段信息</span>
      <span slot="footer" class="dialog-footer">
    <el-button @click="dialogVisible = false">取 消</el-button>
    <el-button type="primary" @click="dialogVisible = false">确 定</el-button>
  </span>
    </el-dialog>
    【说明】
    a.title:弹出框的标题
    b.:visible.sync // 控制弹出框是否显示
    c.:before-close //在弹出框关闭之前触发的事件 


2.自定义校验规则：
   a.定义校验规则
export default {
    name: "Users.vue",
    data() {
      // 验证邮箱的规则
      var checkEmail = (rule,value,cb)=>{
        
      }
      // 验证手机号的校验规则
      var checkMobile = (rule,value,cb)=>{}
   b.通过正则进行校验
3.邮箱和手机号正则校验:
         // 验证邮箱的规则
      var checkEmail = (rule,value,cb)=>{
        // 验证邮箱正则表达式
        const regEmail = /^([a-zA-Z]|[0-9])(\w|\-)+@[a-zA-Z0-9]+\.([a-zA-Z]{2,4})$/
        if(regEmail.test(value)){
          return cb()
        } else{
          cb(new Error('请输入合法的邮箱'))
        }

      }
      // 验证手机号的校验规则
      var checkMobile = (rule,value,cb)=>{
        // 验证手机号的正则表达式
        const regMobile =  /^[1][3,4,5,7,8][0-9]{9}$/
        if(regMobile.test(value)){
          return cb()
        } else{
          cb(new Error('请输入合法的手机号'))
        }
      }
4.正则表达式应用[在正则校验中添加validator应用规则校验]:
           // 添加表单的验证规则对象
        addFormRules:{
          username:[
            {required:true,message:'请输入用户名',trigger:'blur'},
            {min:3,max:10,message:'用户名的长度在3~10个字符之间',trigger: 'blur'}],
          password:[
            {required:true,message:'请输入密码',trigger:'blur'},
            {min:6,max:10,message:'用户名的长度在6~10个字符之间',trigger: 'blur'}],
          email:[
            {required:true,message:'请输入邮箱',trigger:'blur'},
            {validator:checkEmail,trigger:'blur'}],
          mobile:[
            {required:true,message:'请输入手机号',trigger:'blur'},
            {validator:checkMobile,trigger:'blur'}],
        }
  5.自定义校验规则
  【公式】
  export default {
    data() {
      var checkAge = (rule, value, callback) => {
        if (!value) {
          return callback(new Error('年龄不能为空'));
        }
        setTimeout(() => {
          if (!Number.isInteger(value)) {
            callback(new Error('请输入数字值'));
          } else {
            if (value < 18) {
              callback(new Error('必须年满18岁'));
            } else {
              callback();
            }
          }
        }, 1000);
      };
      【说明】
       callback:回调函数
       【注】callback回调函数错误信息中需要添加Error/正确直接返回callback()函数即可

6.新增用户函数
  【注】在新增用户前需要校验用户信息[通过对象调用校验函数]
  this.$refs.addFormRef.validate()
  【注】需要箭头函数打印校验结果
      // 点击按钮添加新用户
      addUser(){
        this.$refs.addFormRef.validate(valid=>{
          if (!valid){
            return
          } else{
            // 发起添加用户请求
          }
        })
      }
【代码】
      // 点击按钮添加新用户
      addUser(){
        this.$refs.addFormRef.validate(async valid=>{
          if (!valid){
            return
          } else{
            // 发起添加用户请求
          const {data:res} = await this.$http.post('users',this.addForm)
            if (201!==res.meta.status){
              this.$message.error('添加用户失败！');
            } else{
              this.$message.success('添加用户成功！')
              // 隐藏添加用户的对话框
              this.addDialogVisible = false
              // 重新获取用户列表数据
              this.getUserList();
            }
          }
        })
      }
      【注】
         新增后需要的操作：1.关闭对话框2.刷新页面