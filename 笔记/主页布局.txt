一、主页布局
  1.通过参考Element-UI网站中的Container 布局容器进行布局
  2.将Element-ui中的代码粘贴到<template>标签中
  <template>
<!--  Element-ui代码开始-->
  <el-container>
    <el-header>Header<el-button type="info" @click="logout">退出</el-button></el-header>
    <el-container>
      <el-aside width="200px">Aside</el-aside>
      <el-main>Main</el-main>
    </el-container>
  </el-container>
<!--  Element-ui代码结束-->
</template>
【注】引用el-container需要在element.js中进行导入
【实用】el-header组件名称既可以当做class类名进行样式控制
【例】<el-header>
 <style lang="less" scoped>
  .el-header{
    background-color: #373D41;
  }
  .el-aside{
    background-color: #333744;

  }
  .el-main{
    background-color: #EAEDF1;
  }

</style>
二、页面撑满全屏
   通过F12可以看见页面<section>没有占满空间
   通过选择发现<section>为最外层<el-container>[因此需将container撑满]
     1.给最外层<el-container>添加自定义类名
       .home-container{
    height: 100%;
  }
三、获取标签中的子标签 通过'>'
   【例】
     .el-header{
    background-color: #373D41;
    display: flex;
    justify-content: space-between;
    padding-left: 0;
    align-items: center;
    color: #fff;
    font-size: 20px;
    // 获取el-header中的div子标签
    >div{
      display: flex;
      align-items: center;
      span{
        margin-left: 15px;
      }
    }
  }
四、通过axios请求拦截器添加token，保证拥有获取数据的权限[通过在header头部信息中添加Authorization字段来进行校验]
  【公式】
    // axios请求拦截[处理请求头]
     axios.interceptors.request.use(config=>{
     // 为请求头对象，添加Token验证的Authorization字段
     .headers.Authorization = window.sessionStorage.getItem('token')
     return config
     })
     【例】在main.js中的配置axios根路径下面配置axios拦截
     // 设置axios请求根路径
axios.defaults.baseURL= 'http://timemeetyou.com:8889/api/private/v1/'
// axios设置连接器
axios.interceptors.request.use(config=>{
  console.log(config)
  config.headers.Authorization = window.sessionStorage.getItem('token')
  // 在最后必须return config
  return config
})
// 将包挂载到vue原型对象上-目的:每个Vue组件可以通过this直接访问http-从而发送请求
Vue.prototype.$http = axios
五、导航栏的展示：
   在el-submenu中添加v-for进行展示导航栏
   <el-submenu index="1" v-for = 'item in menulist' :key="item.id">
   【注】这里的index不能相同，需要通过index来控制导航栏的展示[可以通过id进行展示]
六、自定义图标
     1.定义字体对象
     iconsObj-id作为键，图标名称作为值
     iconObj:{
          '125':'iconfont icon-user',
          '103':'iconfont icon-tijikongjian',
          '101':'iconfont icon-shangpin',
          '102':'iconfont icon-danju',
          '145':'iconfont icon-baobiao'
        }
	2.使用通过id进行赋值图标
	       <!--图标-->
              <i :class="iconObj[item.id]"></i>